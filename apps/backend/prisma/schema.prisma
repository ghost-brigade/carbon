// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  firstName        String?
  lastName        String?
  birthDate       DateTime?
  entryDate       DateTime          @default(now())
  experience      Int?              @default(0)
  salary          Json?
  role            String            @default("user")
  skills          UserSkill[]
  taskLists       UserTaskList[]
  missions        Mission[]
  userTokens      UserToken[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserPreference  UserPreference[]
  School          School[]
  UserAchievement UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievement   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
}

// model Achievement {
//   id              String            @id @default(uuid())
//   name            String
//   description     String
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   UserAchievement UserAchievement[]
// }

model UserPreference {
  id          String   @id @default(uuid())
  userId      String
  description String
  isLiked     Boolean
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Society {
  id        String    @id @default(uuid())
  name      String
  missions  Mission[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Skill {
  id         String      @id @default(uuid())
  name       String
  language   String?
  userSkills UserSkill[]
  taskLists  TaskList[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model UserSkill {
  userId    String
  skillId   String
  level     Int
  user      User     @relation(fields: [userId], references: [id])
  skill     Skill    @relation(fields: [skillId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, skillId])
}

model TaskList {
  id            String         @id @default(uuid())
  name          String
  level         Int
  description   String
  skillId       String
  required      Boolean
  skill         Skill          @relation(fields: [skillId], references: [id])
  userTaskLists UserTaskList[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserTaskList {
  id         String   @id @default(uuid())
  taskListId String
  userId     String
  status     String
  taskList   TaskList @relation(fields: [taskListId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Mission {
  id               String    @id @default(uuid())
  name             String
  description      String
  dateStart        DateTime
  dateEnd          DateTime?
  rating           Int?
  averageDailyRate Json?
  feedback         String?
  societyId        String?
  userId           String
  society          Society? @relation(fields: [societyId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model School {
  id          String   @id @default(uuid())
  name        String
  description String
  dateStart   DateTime
  dateEnd     DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id          String   @id @default(uuid())
  name        String
  description String
  tags        String[]
  path        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
